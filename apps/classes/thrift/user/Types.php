<?php
namespace apps\classes\thrift\user;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class ProfileInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $avatar = null;
  /**
   * @var int
   */
  public $gender = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var string
   */
  public $location = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $province = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var int
   */
  public $followLimit = null;
  /**
   * @var int
   */
  public $followCount = null;
  /**
   * @var string
   */
  public $lastLoginIp = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $lastTime = null;
  /**
   * @var int
   */
  public $createTime = null;
  /**
   * @var \apps\classes\thrift\user\UserBindInfo[]
   */
  public $bindInfos = null;
  /**
   * @var \apps\classes\thrift\user\UserFollowInfo[]
   */
  public $followInfos = null;
  /**
   * @var \apps\classes\thrift\user\UserDeviceInfo[]
   */
  public $deviceInfos = null;
  /**
   * @var string
   */
  public $receiveName = null;
  /**
   * @var string
   */
  public $receivePhone = null;
  /**
   * @var string
   */
  public $receiveAddress = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'avatar',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gender',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'province',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'followLimit',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'followCount',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'lastLoginIp',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'lastTime',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'bindInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\apps\classes\thrift\user\UserBindInfo',
            ),
          ),
        17 => array(
          'var' => 'followInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\apps\classes\thrift\user\UserFollowInfo',
            ),
          ),
        18 => array(
          'var' => 'deviceInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\apps\classes\thrift\user\UserDeviceInfo',
            ),
          ),
        19 => array(
          'var' => 'receiveName',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'receivePhone',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'receiveAddress',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['avatar'])) {
        $this->avatar = $vals['avatar'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['province'])) {
        $this->province = $vals['province'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['followLimit'])) {
        $this->followLimit = $vals['followLimit'];
      }
      if (isset($vals['followCount'])) {
        $this->followCount = $vals['followCount'];
      }
      if (isset($vals['lastLoginIp'])) {
        $this->lastLoginIp = $vals['lastLoginIp'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['lastTime'])) {
        $this->lastTime = $vals['lastTime'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['bindInfos'])) {
        $this->bindInfos = $vals['bindInfos'];
      }
      if (isset($vals['followInfos'])) {
        $this->followInfos = $vals['followInfos'];
      }
      if (isset($vals['deviceInfos'])) {
        $this->deviceInfos = $vals['deviceInfos'];
      }
      if (isset($vals['receiveName'])) {
        $this->receiveName = $vals['receiveName'];
      }
      if (isset($vals['receivePhone'])) {
        $this->receivePhone = $vals['receivePhone'];
      }
      if (isset($vals['receiveAddress'])) {
        $this->receiveAddress = $vals['receiveAddress'];
      }
    }
  }

  public function getName() {
    return 'ProfileInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->followLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->followCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastLoginIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::LST) {
            $this->bindInfos = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \apps\classes\thrift\user\UserBindInfo();
              $xfer += $elem5->read($input);
              $this->bindInfos []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::LST) {
            $this->followInfos = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \apps\classes\thrift\user\UserFollowInfo();
              $xfer += $elem11->read($input);
              $this->followInfos []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::LST) {
            $this->deviceInfos = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $elem17 = new \apps\classes\thrift\user\UserDeviceInfo();
              $xfer += $elem17->read($input);
              $this->deviceInfos []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receivePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProfileInfo');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar !== null) {
      $xfer += $output->writeFieldBegin('avatar', TType::STRING, 3);
      $xfer += $output->writeString($this->avatar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::I32, 4);
      $xfer += $output->writeI32($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 5);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 6);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 7);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->province !== null) {
      $xfer += $output->writeFieldBegin('province', TType::STRING, 8);
      $xfer += $output->writeString($this->province);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 9);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followLimit !== null) {
      $xfer += $output->writeFieldBegin('followLimit', TType::I32, 10);
      $xfer += $output->writeI32($this->followLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followCount !== null) {
      $xfer += $output->writeFieldBegin('followCount', TType::I32, 11);
      $xfer += $output->writeI32($this->followCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastLoginIp !== null) {
      $xfer += $output->writeFieldBegin('lastLoginIp', TType::STRING, 12);
      $xfer += $output->writeString($this->lastLoginIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 13);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastTime !== null) {
      $xfer += $output->writeFieldBegin('lastTime', TType::I64, 14);
      $xfer += $output->writeI64($this->lastTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 15);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindInfos !== null) {
      if (!is_array($this->bindInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bindInfos', TType::LST, 16);
      {
        $output->writeListBegin(TType::STRUCT, count($this->bindInfos));
        {
          foreach ($this->bindInfos as $iter18)
          {
            $xfer += $iter18->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followInfos !== null) {
      if (!is_array($this->followInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('followInfos', TType::LST, 17);
      {
        $output->writeListBegin(TType::STRUCT, count($this->followInfos));
        {
          foreach ($this->followInfos as $iter19)
          {
            $xfer += $iter19->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceInfos !== null) {
      if (!is_array($this->deviceInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deviceInfos', TType::LST, 18);
      {
        $output->writeListBegin(TType::STRUCT, count($this->deviceInfos));
        {
          foreach ($this->deviceInfos as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveName !== null) {
      $xfer += $output->writeFieldBegin('receiveName', TType::STRING, 19);
      $xfer += $output->writeString($this->receiveName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receivePhone !== null) {
      $xfer += $output->writeFieldBegin('receivePhone', TType::STRING, 20);
      $xfer += $output->writeString($this->receivePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveAddress !== null) {
      $xfer += $output->writeFieldBegin('receiveAddress', TType::STRING, 21);
      $xfer += $output->writeString($this->receiveAddress);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserBindInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $bindType = null;
  /**
   * @var string
   */
  public $bindKey = null;
  /**
   * @var string
   */
  public $thirdToken = null;
  /**
   * @var int
   */
  public $createTime = null;
  /**
   * @var int
   */
  public $updateTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'bindType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'bindKey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'thirdToken',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'updateTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['bindType'])) {
        $this->bindType = $vals['bindType'];
      }
      if (isset($vals['bindKey'])) {
        $this->bindKey = $vals['bindKey'];
      }
      if (isset($vals['thirdToken'])) {
        $this->thirdToken = $vals['thirdToken'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
    }
  }

  public function getName() {
    return 'UserBindInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bindType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bindKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thirdToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserBindInfo');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindType !== null) {
      $xfer += $output->writeFieldBegin('bindType', TType::I32, 2);
      $xfer += $output->writeI32($this->bindType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindKey !== null) {
      $xfer += $output->writeFieldBegin('bindKey', TType::STRING, 3);
      $xfer += $output->writeString($this->bindKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thirdToken !== null) {
      $xfer += $output->writeFieldBegin('thirdToken', TType::STRING, 4);
      $xfer += $output->writeString($this->thirdToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 5);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I64, 6);
      $xfer += $output->writeI64($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserFollowInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $sid = null;
  /**
   * @var string
   */
  public $starName = null;
  /**
   * @var int
   */
  public $number = null;
  /**
   * @var int
   */
  public $shine = null;
  /**
   * @var int
   */
  public $createTime = null;
  /**
   * @var int
   */
  public $updateTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'sid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'starName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'number',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'shine',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'updateTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['starName'])) {
        $this->starName = $vals['starName'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
      if (isset($vals['shine'])) {
        $this->shine = $vals['shine'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
    }
  }

  public function getName() {
    return 'UserFollowInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->starName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->shine);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserFollowInfo');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::I32, 2);
      $xfer += $output->writeI32($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->starName !== null) {
      $xfer += $output->writeFieldBegin('starName', TType::STRING, 3);
      $xfer += $output->writeString($this->starName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I64, 4);
      $xfer += $output->writeI64($this->number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shine !== null) {
      $xfer += $output->writeFieldBegin('shine', TType::I64, 5);
      $xfer += $output->writeI64($this->shine);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 6);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I64, 7);
      $xfer += $output->writeI64($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserDeviceInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $deviceType = null;
  /**
   * @var string
   */
  public $deviceId = null;
  /**
   * @var string
   */
  public $osVersion = null;
  /**
   * @var string
   */
  public $deviceModel = null;
  /**
   * @var int
   */
  public $pushType = null;
  /**
   * @var string
   */
  public $pushToken = null;
  /**
   * @var int
   */
  public $createTime = null;
  /**
   * @var int
   */
  public $updateTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'deviceType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'deviceId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'osVersion',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'deviceModel',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'pushType',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pushToken',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'updateTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['deviceType'])) {
        $this->deviceType = $vals['deviceType'];
      }
      if (isset($vals['deviceId'])) {
        $this->deviceId = $vals['deviceId'];
      }
      if (isset($vals['osVersion'])) {
        $this->osVersion = $vals['osVersion'];
      }
      if (isset($vals['deviceModel'])) {
        $this->deviceModel = $vals['deviceModel'];
      }
      if (isset($vals['pushType'])) {
        $this->pushType = $vals['pushType'];
      }
      if (isset($vals['pushToken'])) {
        $this->pushToken = $vals['pushToken'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
    }
  }

  public function getName() {
    return 'UserDeviceInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deviceType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->osVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceModel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pushType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pushToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserDeviceInfo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 2);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceType !== null) {
      $xfer += $output->writeFieldBegin('deviceType', TType::I32, 3);
      $xfer += $output->writeI32($this->deviceType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceId !== null) {
      $xfer += $output->writeFieldBegin('deviceId', TType::STRING, 4);
      $xfer += $output->writeString($this->deviceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osVersion !== null) {
      $xfer += $output->writeFieldBegin('osVersion', TType::STRING, 5);
      $xfer += $output->writeString($this->osVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceModel !== null) {
      $xfer += $output->writeFieldBegin('deviceModel', TType::STRING, 6);
      $xfer += $output->writeString($this->deviceModel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pushType !== null) {
      $xfer += $output->writeFieldBegin('pushType', TType::I32, 7);
      $xfer += $output->writeI32($this->pushType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pushToken !== null) {
      $xfer += $output->writeFieldBegin('pushToken', TType::STRING, 8);
      $xfer += $output->writeString($this->pushToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 9);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I64, 10);
      $xfer += $output->writeI64($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserDetailInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $avatar = null;
  /**
   * @var int
   */
  public $gender = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var string
   */
  public $location = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $province = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var int
   */
  public $followLimit = null;
  /**
   * @var int
   */
  public $followCount = null;
  /**
   * @var string
   */
  public $lastLoginIp = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $lastTime = null;
  /**
   * @var int
   */
  public $createTime = null;
  /**
   * @var string
   */
  public $receiveName = null;
  /**
   * @var string
   */
  public $receivePhone = null;
  /**
   * @var string
   */
  public $receiveAddress = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'avatar',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gender',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'province',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'followLimit',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'followCount',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'lastLoginIp',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'lastTime',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'receiveName',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'receivePhone',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'receiveAddress',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['avatar'])) {
        $this->avatar = $vals['avatar'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['province'])) {
        $this->province = $vals['province'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['followLimit'])) {
        $this->followLimit = $vals['followLimit'];
      }
      if (isset($vals['followCount'])) {
        $this->followCount = $vals['followCount'];
      }
      if (isset($vals['lastLoginIp'])) {
        $this->lastLoginIp = $vals['lastLoginIp'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['lastTime'])) {
        $this->lastTime = $vals['lastTime'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['receiveName'])) {
        $this->receiveName = $vals['receiveName'];
      }
      if (isset($vals['receivePhone'])) {
        $this->receivePhone = $vals['receivePhone'];
      }
      if (isset($vals['receiveAddress'])) {
        $this->receiveAddress = $vals['receiveAddress'];
      }
    }
  }

  public function getName() {
    return 'UserDetailInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->followLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->followCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastLoginIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receivePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserDetailInfo');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar !== null) {
      $xfer += $output->writeFieldBegin('avatar', TType::STRING, 3);
      $xfer += $output->writeString($this->avatar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::I32, 4);
      $xfer += $output->writeI32($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 5);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 6);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 7);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->province !== null) {
      $xfer += $output->writeFieldBegin('province', TType::STRING, 8);
      $xfer += $output->writeString($this->province);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 9);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followLimit !== null) {
      $xfer += $output->writeFieldBegin('followLimit', TType::I32, 10);
      $xfer += $output->writeI32($this->followLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followCount !== null) {
      $xfer += $output->writeFieldBegin('followCount', TType::I32, 11);
      $xfer += $output->writeI32($this->followCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastLoginIp !== null) {
      $xfer += $output->writeFieldBegin('lastLoginIp', TType::STRING, 12);
      $xfer += $output->writeString($this->lastLoginIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 13);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastTime !== null) {
      $xfer += $output->writeFieldBegin('lastTime', TType::I64, 14);
      $xfer += $output->writeI64($this->lastTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 15);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveName !== null) {
      $xfer += $output->writeFieldBegin('receiveName', TType::STRING, 16);
      $xfer += $output->writeString($this->receiveName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receivePhone !== null) {
      $xfer += $output->writeFieldBegin('receivePhone', TType::STRING, 17);
      $xfer += $output->writeString($this->receivePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveAddress !== null) {
      $xfer += $output->writeFieldBegin('receiveAddress', TType::STRING, 18);
      $xfer += $output->writeString($this->receiveAddress);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


